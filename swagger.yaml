openapi: 2.0.0
info:
  title: Traffic Infraction Registration System API
  version: 1.0.0
paths:
  /api/generar_informe:
    get:
      summary: Obtain all violations by email
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
          example: joe@gmail.com
      responses:
        "200":
          description: A list of violations
          content:
            application/json:
              schema:
                type: object
                properties:
                  violations:
                    type: array
                    items:
                      type: object
                      properties:
                        vehicle_id:
                          type: integer
                        license_plate:
                          type: string
                        timestamp:
                          type: string
                        comments:
                          type: string
        "404":
          description: Person not found
  /api/token:
    post:
      summary: Generate Token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                unique_id:
                  type: string
                  example: "12345"
      responses:
        "200":
          description: Token generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        "401":
          description: Invalid unique ID
  /api/violation:
    post:
      summary: Create a violation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                license_plate:
                  type: string
                  example: ABC123
                timestamp:
                  type: string
                  example: "2024-08-02T12:34:56"
                comments:
                  type: string
                  example: Speeding
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          example: Bearer {token}
      responses:
        "201":
          description: Violation added successfully
        "404":
          description: Vehicle not found
  /api/officer:
    delete:
      summary: Delete an officer
      parameters:
        - name: unique_id
          in: query
          required: true
          schema:
            type: string
          example: 54321
      responses:
        "200":
          description: Officer deleted successfully
    put:
      summary: Update an officer
      parameters:
        - name: unique_id
          in: query
          required: true
          schema:
            type: string
          example: 12345
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Officer Updated
                unique_id:
                  type: string
                  example: 54321
      responses:
        "200":
          description: Officer updated successfully
    get:
      summary: Get an officer
      parameters:
        - name: unique_id
          in: query
          required: true
          schema:
            type: string
          example: 12345
      responses:
        "200":
          description: Officer found
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  unique_id:
                    type: string
        "404":
          description: Officer not found
    post:
      summary: Create an officer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Officer Smith
                unique_id:
                  type: string
                  example: 12345
      responses:
        "201":
          description: Officer created successfully
  /api/vehicle:
    delete:
      summary: Delete a vehicle
      parameters:
        - name: license_plate
          in: query
          required: true
          schema:
            type: string
          example: XYZ789
      responses:
        "200":
          description: Vehicle deleted successfully
        "404":
          description: Vehicle not found
    put:
      summary: Update a vehicle
      parameters:
        - name: license_plate
          in: query
          required: true
          schema:
            type: string
          example: ABC123
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                license_plate:
                  type: string
                  example: XYZ789
                brand:
                  type: string
                  example: Honda
                color:
                  type: string
                  example: Blue
                email:
                  type: string
                  example: joe@gmail.com
      responses:
        "200":
          description: Vehicle updated successfully
        "404":
          description: Vehicle or person not found
    get:
      summary: Get a vehicle
      parameters:
        - name: license_plate
          in: query
          required: true
          schema:
            type: string
          example: ABC123
      responses:
        "200":
          description: Vehicle found
          content:
            application/json:
              schema:
                type: object
                properties:
                  license_plate:
                    type: string
                  brand:
                    type: string
                  color:
                    type: string
                  email:
                    type: string
        "404":
          description: Vehicle not found
    post:
      summary: Create a vehicle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                license_plate:
                  type: string
                  example: ABC123
                brand:
                  type: string
                  example: Toyota
                color:
                  type: string
                  example: Red
                email:
                  type: string
                  example: joe@gmail.com
      responses:
        "201":
          description: Vehicle added successfully
        "404":
          description: Person not found
  /api/person:
    delete:
      summary: Delete a person
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
          example: joe@gmail.com
      responses:
        "200":
          description: Person deleted successfully
    put:
      summary: Update a person
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Updated
                email:
                  type: string
                  example: joe@gmail.com
      responses:
        "200":
          description: Person updated successfully
    get:
      summary: Get a person
      parameters:
        - name: email
          in: query
          required: true
          schema:
            type: string
          example: joe@gmail.com
      responses:
        "200":
          description: Person found
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  email:
                    type: string
        "404":
          description: Person not found
    post:
      summary: Create a person
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Joe
                email:
                  type: string
                  example: joe@gmail.com
      responses:
        "201":
          description: Person created successfully
